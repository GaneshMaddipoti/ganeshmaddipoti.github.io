[{"id":"Text-1760697871109","text":"Python","x":188,"y":88,"width":99.9375,"height":30,"bgColor":"#E0E0E0"},{"id":"Note-1760697881698","text":"- The Python programming language is a high-level, interpreted, general-purpose language known for its readability and simplicity. <div>- It was created by Guido van Rossum and first released in 1991.<div><br><div><b>Key Features</b><div>Interpreted: Python code is executed line by line by an interpreter, which allows for rapid testing and debugging, though it can be slightly slower than compiled languages.\nHigh-Level: Programmers don't need to manage low-level details like memory allocation, making the language easier to learn and use.\nDynamically Typed: You don't need to declare the variable type (e.g., integer, string) explicitly; the interpreter determines it at runtime.\nReadability: Python's design philosophy emphasizes code readability, often using English keywords and requiring less syntax than other languages. Its use of indentation to define code blocks is a key feature that enforces consistent style.\nExtensive Standard Library: It comes with a large collection of built-in modules and functions that provide a wide range of functionalities \"out of the box.\"\nLarge Community &amp; Ecosystem: Python benefits from a huge, active community and an enormous collection of third-party libraries and frameworks (e.g., NumPy, Pandas, Django, Flask).</div></div><div><br></div><div><b>Common Uses and Applications\n</b>Web Development: Used for back-end development with frameworks like Django and Flask.\nData Science &amp; Analysis: Dominates this area with libraries like Pandas for data manipulation and Matplotlib/Seaborn for visualization.\nMachine Learning (ML) &amp; Artificial Intelligence (AI): The go-to language due to libraries such as TensorFlow and PyTorch.\nScripting &amp; Automation: Excellent for writing small scripts to automate tasks and system administration.\nSoftware Testing: Used for writing test scripts.\nGame Development: Though not as dominant as others, libraries like Pygame are used for simple game creation.</div></div></div>","x":189,"y":144,"width":1005.9375,"height":459.9375,"bgColor":"wheat"},{"id":"Container-1760698325958","elements":[{"id":"Text-1760698332716","text":"Execution Model","x":3.333333969116211,"y":5,"width":190.921875,"height":37.96875,"bgColor":"#E0E0E0"},{"id":"Node-1760698350536","text":"Source code\n(.py)","x":43.33333396911621,"y":106,"width":142.96875,"height":61.921875,"bgColor":"#F0F0F0"},{"id":"Node-1760698361878","text":"compiler","x":249.3333339691162,"y":120,"width":99.9375,"height":30,"bgColor":"#F0F0F0"},{"id":"Node-1760698369870","text":"Intermediate Code \n(.pyc)","x":413.3333339691162,"y":102,"width":157.96875,"height":62.953125,"bgColor":"#F0F0F0"},{"id":"Node-1760698426596","text":"Machine Code","x":855.3333339691162,"y":98,"width":143.953125,"height":50.953125,"bgColor":"#F0F0F0"},{"id":"Node-1760698442544","text":"Interpreter\n(pvm)","x":638.3333339691162,"y":102,"width":118.921875,"height":45,"bgColor":"#F0F0F0"}],"x":186.3333339691162,"y":623,"width":1032.9375,"height":256.921875,"bgColor":"#F0F0F0"},{"id":"Divider-1760713287260","text":"Divider","x":168.3333339691162,"y":1482.6666870117188,"width":2140.96875,"height":22.96875,"bgColor":"#F0F0F0"},{"id":"Text-1760713311064","text":"Syntax","x":180.3333339691162,"y":1545.3333129882812,"width":99.9375,"height":30,"bgColor":"#E0E0E0"},{"id":"Container-1760713401155","elements":[{"id":"Text-1760713407317","text":"Variables","x":13.333333969116211,"y":9.33331298828125,"width":99.9375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760713414979","text":"<pre><code class=\"language-scala hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># In Python, a variable is not a \"box\" in memory that holds a value. </span>\n<span class=\"hljs-comment\"># Instead, a variable is a tag or name that references (or points to) a specific object in memory.</span>\n<span class=\"hljs-comment\"># Immutable Objects - int, float, str, etc...</span>\n<span class=\"hljs-comment\"># Mutable Objects - list, set, dict, etc...</span>\n<span class=\"hljs-comment\"># Must start with a letter (a-z, A-Z) or an underscore (_).</span>\n<span class=\"hljs-comment\"># Cannot start with a number.</span>\n<span class=\"hljs-comment\"># Can only contain alphanumeric characters and underscores (A-z, 0-9, and _).</span>\n<span class=\"hljs-comment\"># Names are case-sensitive (Age is different from age).</span>\n<span class=\"hljs-comment\"># Cannot use any of Python's reserved keywords (e.g., for, if, while, class).x = 5          # Integer</span>\nname = <span class=\"hljs-string\">\"Alice\"</span> # <span class=\"hljs-type\">String</span>\npi = <span class=\"hljs-number\">3.14</span>      # <span class=\"hljs-type\">Float</span>\nx = <span class=\"hljs-string\">\"hello\"</span>  # x is now a str \n\n<span class=\"hljs-comment\"># Use del to remove a variable</span>\ndel x\n\n<span class=\"hljs-comment\"># Use type() to check a variable’s type:</span>\nage = <span class=\"hljs-number\">30</span>\nprint(<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>(<span class=\"hljs-params\">age</span>))  <span class=\"hljs-title\">#</span> <span class=\"hljs-title\">&lt;class</span> '<span class=\"hljs-title\">int</span>'<span class=\"hljs-title\">&gt;</span></span>\n\n<span class=\"hljs-comment\"># Use casting to convert types:</span>\nx = str(<span class=\"hljs-number\">3</span>)   # '<span class=\"hljs-number\">3</span>'\ny = int(<span class=\"hljs-string\">\"7\"</span>) # <span class=\"hljs-number\">7</span>\nz = float(<span class=\"hljs-string\">\"2.5\"</span>) # <span class=\"hljs-number\">2.5</span>\n\n<span class=\"hljs-comment\"># Variable Scope</span>\n<span class=\"hljs-type\">Global</span>: <span class=\"hljs-type\">Defined</span> outside functions, accessible everywhere\n<span class=\"hljs-type\">Local</span>: <span class=\"hljs-type\">Defined</span> inside functions, accessible only there\n<span class=\"hljs-type\">Nonlocal</span>: <span class=\"hljs-type\">Used</span> in nested functions to refer to outer scope variables\n</code></pre>","x":21.33333396911621,"y":64.33331298828125,"width":752.953125,"height":657.9375,"bgColor":"#555"}],"x":178.3333339691162,"y":1610.3333129882812,"width":772.96875,"height":296.953125,"bgColor":"#F0F0F0"},{"id":"Container-1760713459868","elements":[{"id":"Text-1760713463818","text":"Literals","x":9.333333969116211,"y":9.33331298828125,"width":99.9375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760713473011","text":"<pre><code class=\"language-scala hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># A literal is data whose values are determined by the literal itself.</span>\n<span class=\"hljs-number\">123</span>\n<span class=\"hljs-number\">434.34</span>\n'c'\n<span class=\"hljs-string\">\"hello\"</span>\n<span class=\"hljs-comment\"># octal - 0o  (prefixed by zero and o)</span>\n<span class=\"hljs-comment\"># hexa-decimal - 0x (prefixed by zero and x)</span>\n<span class=\"hljs-comment\"># Boolean - True / False</span>\n</code></pre>","x":27.33333396911621,"y":54.33331298828125,"width":558.9375,"height":231.9375,"bgColor":"#555"}],"x":980.3333339691162,"y":1618.3333129882812,"width":600,"height":302.953125,"bgColor":"#F0F0F0"},{"id":"Container-1760715687543","elements":[{"id":"Text-1760715693095","text":"Operators","x":8.333333969116211,"y":7.33331298828125,"width":99.9375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760715703171","text":"<pre><code class=\"language-scala hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># Arithmatic operators</span>\n+ <span class=\"hljs-type\">Addition</span>: a + b\n- <span class=\"hljs-type\">Subtraction</span>: a - b\n* <span class=\"hljs-type\">Multiplication</span>: a * b\n/ <span class=\"hljs-type\">Division</span> (float result): a / b\n<span class=\"hljs-comment\">// Floor Division (integer result): a // b</span>\n% <span class=\"hljs-type\">Modulus</span> (remainder): a % b\n** <span class=\"hljs-type\">Exponentiation</span>: a ** b\n\n<span class=\"hljs-comment\"># Comparision operators</span>\n== <span class=\"hljs-type\">Equal</span> to\n!= <span class=\"hljs-type\">Not</span> equal to\n&gt;, &lt; <span class=\"hljs-type\">Greater</span> than / <span class=\"hljs-type\">Less</span> than\n&gt;=, &lt;= <span class=\"hljs-type\">Greater</span> than or equal / <span class=\"hljs-type\">Less</span> than or equal\n\n<span class=\"hljs-comment\"># Logical operators</span>\nand <span class=\"hljs-type\">Returns</span> <span class=\"hljs-type\">True</span> <span class=\"hljs-keyword\">if</span> both statements are <span class=\"hljs-literal\">true</span>\nor <span class=\"hljs-type\">Returns</span> <span class=\"hljs-type\">True</span> <span class=\"hljs-keyword\">if</span> at least one statement is <span class=\"hljs-literal\">true</span>\nnot <span class=\"hljs-type\">Reverses</span> the result (<span class=\"hljs-type\">True</span> becomes <span class=\"hljs-type\">False</span>)\n\n<span class=\"hljs-comment\"># Bitwise operators</span>\n&amp; <span class=\"hljs-type\">AND</span>\n| <span class=\"hljs-type\">OR</span>\n^ <span class=\"hljs-type\">XOR</span>\n~ <span class=\"hljs-type\">NOT</span>\n&lt;&lt;, &gt;&gt; <span class=\"hljs-type\">Shift</span> left/right\n\n<span class=\"hljs-comment\"># Membership operators</span>\nin <span class=\"hljs-type\">Returns</span> <span class=\"hljs-type\">True</span> <span class=\"hljs-keyword\">if</span> value is found\nnot in <span class=\"hljs-type\">Returns</span> <span class=\"hljs-type\">True</span> <span class=\"hljs-keyword\">if</span> value is not found\n\n<span class=\"hljs-comment\"># Identity operators</span>\nis <span class=\"hljs-type\">Returns</span> <span class=\"hljs-type\">True</span> <span class=\"hljs-keyword\">if</span> both variables point to the same <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span></span>\nis not <span class=\"hljs-type\">Returns</span> <span class=\"hljs-type\">True</span> <span class=\"hljs-keyword\">if</span> they don’t</code></pre>","x":22.33333396911621,"y":58.33331298828125,"width":694.921875,"height":760.921875,"bgColor":"#555"}],"x":1620.3333339691162,"y":1616.3333129882812,"width":694.921875,"height":295.921875,"bgColor":"#F0F0F0"},{"id":"Container-1760863796099","elements":[{"id":"Text-1760863802028","text":"Conditions","x":3,"y":4.25,"width":116.953125,"height":31.921875,"bgColor":"#E0E0E0"},{"id":"Code-1760863914707","text":"<div># if statement executes upon true or else statement</div>\n\nscore = 85\nif score &gt; 90:\n    print(\"Grade A\")\nelif score &gt; 75:\n    print(\"Grade B\")\nelif score &gt; 65:\n    print(\"Grade C\")\nelse:\n    print(\"Grade D\")\n\n# single line if statement\nprint(\"Eligible\") if age &gt; 18 else print(\"Not eligible\")\n\n<div><br></div>","x":23,"y":54.25,"width":532.96875,"height":298.921875,"bgColor":"#555"}],"x":181,"y":2060.25,"width":575.953125,"height":368.953125,"bgColor":"#F0F0F0"},{"id":"Container-1760864184073","elements":[{"id":"Text-1760864188235","text":"Loops","x":5,"y":7.25,"width":99.9375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760864199068","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># Used to iterate over sequences like lists, tuples, strings, sets, or dictionaries.</span>\nfruits = [<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"banana\"</span>, <span class=\"hljs-string\">\"cherry\"</span>]\n<span class=\"hljs-keyword\">for</span> fruit <span class=\"hljs-keyword\">in</span> fruits:\n    <span class=\"hljs-built_in\">print</span>(fruit)\n\n<span class=\"hljs-comment\"># Looping with range()</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-built_in\">print</span>(i)  <span class=\"hljs-comment\"># prints 0 to 4# Executes as long as a condition is true.</span>\ncount = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> count &lt; <span class=\"hljs-number\">5</span>:\n    <span class=\"hljs-built_in\">print</span>(count)\n    count += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># break: Exit the loop early.</span>\n<span class=\"hljs-keyword\">for</span> fruit <span class=\"hljs-keyword\">in</span> fruits:\n    <span class=\"hljs-keyword\">if</span> fruit == <span class=\"hljs-string\">\"banana\"</span>:\n        <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-built_in\">print</span>(fruit)\n\n<span class=\"hljs-comment\"># continue: Skip the current iteration.</span>\n<span class=\"hljs-keyword\">for</span> fruit <span class=\"hljs-keyword\">in</span> fruits:\n    <span class=\"hljs-keyword\">if</span> fruit == <span class=\"hljs-string\">\"banana\"</span>:\n        <span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-built_in\">print</span>(fruit)\n\n<span class=\"hljs-comment\"># pass: Placeholder for future code.</span>\n<span class=\"hljs-keyword\">for</span> fruit <span class=\"hljs-keyword\">in</span> fruits:\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># does nothing</span>\n\n# for-else, while-else\n<span class=\"hljs-comment\"># The else block runs only if the loop completes normally — meaning it didn’t exit early via break.</span>\nnumbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>]\n\n<span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> numbers:\n    <span class=\"hljs-keyword\">if</span> num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Found an even number:\"</span>, num)\n        <span class=\"hljs-keyword\">break</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"No even numbers found.\"</span>)\n\ncount = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-keyword\">while</span> count &lt; <span class=\"hljs-number\">5</span>:\n    <span class=\"hljs-built_in\">print</span>(count)\n    count += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Loop completed without interruption.\"</span>)\n</code></pre>","x":14,"y":47.25,"width":886.921875,"height":594.9375,"bgColor":"#555"}],"x":777,"y":2053.25,"width":716.953125,"height":382.96875,"bgColor":"#F0F0F0"},{"id":"Divider-1760865361994","text":"Divider","x":141,"y":3157,"width":2143.96875,"height":22.96875,"bgColor":"#F0F0F0"},{"id":"Text-1760865392056","text":"Collections","x":144,"y":3213,"width":140.953125,"height":31.96875,"bgColor":"#E0E0E0"},{"id":"Container-1760865408182","elements":[{"id":"Text-1760865424002","text":"Lists","x":3,"y":5,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760865433519","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># A list in Python is an ordered, indexed, mutable collection \nthat can hold items of any data type — even mixed types.</span>\nmy_list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-number\">3.14</span>, <span class=\"hljs-literal\">True</span>]\nnumbers = <span class=\"hljs-built_in\">list</span>((<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>))\n\n<span class=\"hljs-comment\"># accessing by - By index (starts at 0)</span>\nfruits = [<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"banana\"</span>, <span class=\"hljs-string\">\"cherry\"</span>]\n<span class=\"hljs-built_in\">print</span>(fruits[<span class=\"hljs-number\">0</span>])  <span class=\"hljs-comment\"># \"apple\"</span>\n<span class=\"hljs-comment\"># Negative indexing:</span>\n<span class=\"hljs-built_in\">print</span>(fruits[-<span class=\"hljs-number\">1</span>])  <span class=\"hljs-comment\"># \"cherry\"</span>\n<span class=\"hljs-comment\"># Slicig</span>\n<span class=\"hljs-built_in\">print</span>(fruits[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>])  <span class=\"hljs-comment\"># [\"banana\", \"cherry\"]\n</span>\n# funcitons\nlen()           # returns length of list\ndel list[1]     # removes the item at an index\n\n<span class=\"hljs-comment\"># methods ....\n</span>append()\t<span class=\"hljs-comment\"># Adds an item to the end</span>\ninsert()\t<span class=\"hljs-comment\"># Inserts item at specified index</span>\nremove()\t<span class=\"hljs-comment\"># Removes first matching item</span>\npop()\t        <span class=\"hljs-comment\"># Removes item at index (default last)</span>\nsort()\t        <span class=\"hljs-comment\"># Sorts the list</span>\nreverse()\t<span class=\"hljs-comment\"># Reverses the list</span>\nclear()\t        <span class=\"hljs-comment\"># Removes all items</span>\n</code></pre>","x":22,"y":45,"width":687.984375,"height":510.984375,"bgColor":"#555"}],"x":131,"y":3281,"width":729.984375,"height":570,"bgColor":"#F0F0F0"},{"id":"Container-1760866428032","elements":[{"id":"Text-1760866436580","text":"Misc","x":3,"y":1.66668701171875,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760866444200","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># the backslash (<code>\\</code>) is used as an <strong>escape character</strong> and for <strong>line continuation</strong>\n\n# Basic Swap Using Tuple Unpacking</span>\na = <span class=\"hljs-number\">5</span>\nb = <span class=\"hljs-number\">10</span>\n\na, b = b, a\n\n<span class=\"hljs-comment\"># None is a special constant that represents </span>\n<span class=\"hljs-comment\"># the absence of a value or a null value. </span>\n<span class=\"hljs-comment\"># It’s a built-in object of its own type — NoneType</span>\n<span class=\"hljs-comment\"># It’s a singleton, there’s only one instance of None in a Python program.</span>\n<span class=\"hljs-comment\"># You can assign it to variables to indicate “no value yet”</span>\n<span class=\"hljs-comment\"># Default return value of functions that don’t explicitly return anything</span>\nresult = <span class=\"hljs-literal\">None</span>\n\n<span class=\"hljs-comment\"># global: This variable refers to the one in the global scope, not a new local one.</span>\nx = <span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># global variable</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>():\n    <span class=\"hljs-keyword\">global</span> x\n    x = <span class=\"hljs-number\">20</span>  <span class=\"hljs-comment\"># modifies the global x</span>\n\nupdate()\n<span class=\"hljs-built_in\">print</span>(x)  <span class=\"hljs-comment\"># Output: 20</span>\n\n\n\n\n\n\n</code></pre>","x":17,"y":43.66668701171875,"width":965.953125,"height":597.984375,"bgColor":"#555"}],"x":1557,"y":2040.6666870117188,"width":758.953125,"height":399.984375,"bgColor":"#F0F0F0"},{"id":"Container-1760940967509","elements":[{"id":"Text-1760940973021","text":"Functions","x":5,"y":5.6666259765625,"width":128.953125,"height":39.984375,"bgColor":"#E0E0E0"},{"id":"Code-1760940986712","text":"<pre># Python functions are blocks of reusable code designed to perform a specific task. \n# They help make your programs more organized, readable, and efficient.\n\ndef add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(result)  # 8\n\n# <strong style=\"text-wrap-mode: wrap; font-family: Roboto, sans-serif;\">Default parameters</strong><span style=\"text-wrap-mode: wrap; font-family: Roboto, sans-serif;\">:\n</span>def greet(name=\"Guest\"):\n    print(f\"Hello, {name}\")\n\n# Variable-length arguments\ndef add_all(*numbers):\n    return sum(numbers)\n\n# Lambda functions\nsquare = lambda x: x * x\nprint(square(4))  # 16\n\n</pre>","x":16,"y":64.6666259765625,"width":928.96875,"height":468.984375,"bgColor":"#555"}],"x":184,"y":2551.6666259765625,"width":968.953125,"height":552.984375,"bgColor":"#F0F0F0"},{"id":"Container-1760974422029","elements":[{"id":"Text-1760974428508","text":"Tuples","x":7,"y":6.333251953125,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1760974438023","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># A tuple is an ordered, immutable collection with mixed types.</span>\n<span class=\"hljs-comment\"># Defined using parentheses () or the tuple() constructor.</span>\n\nmy_tuple = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-number\">3.14</span>)\n\n<span class=\"hljs-comment\"># Accessing</span>\nt = (<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>)\n<span class=\"hljs-built_in\">print</span>(t[<span class=\"hljs-number\">0</span>])     <span class=\"hljs-comment\"># \"a\"</span>\n<span class=\"hljs-built_in\">print</span>(t[-<span class=\"hljs-number\">1</span>])    <span class=\"hljs-comment\"># \"c\"</span>\n<span class=\"hljs-built_in\">print</span>(t[<span class=\"hljs-number\">1</span>:])    <span class=\"hljs-comment\"># (\"b\", \"c\")</span>\n\n<span class=\"hljs-comment\"># Packing</span>\nperson = (<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">30</span>)\n\n<span class=\"hljs-comment\"># Unpacking</span>\nname, age = person\n<span class=\"hljs-built_in\">print</span>(name)  <span class=\"hljs-comment\"># \"Alice\"</span>\n</code></pre>","x":12,"y":45.333251953125,"width":716.953125,"height":396.984375,"bgColor":"#555"}],"x":888,"y":3284.333251953125,"width":737.953125,"height":453.984375,"bgColor":"#F0F0F0"},{"id":"Container-1760974772463","elements":[{"id":"Text-1760974777888","text":"Dictionaries","x":5,"y":4,"width":138.984375,"height":33.984375,"bgColor":"#E0E0E0"},{"id":"Code-1760974793216","text":"# used to store data in key-value pairs\n# they are ordered, mutable, indexed by key, with no duplicate keys\n# values can be any type\n\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"Glasgow\"\n}\n\n# Accessing and modifying\nprint(person[\"name\"])  # Alice\nperson[\"email\"] = \"alice@example.com\"\ndel person[\"age\"]\n\n# get to avoid erros\nprint(person.get(\"phone\", \"Not found\"))\n\n# Looking through dictionaries\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n\n","x":15,"y":55,"width":594.984375,"height":373.96875,"bgColor":"#555"}],"x":1658,"y":3276,"width":634.96875,"height":444.984375,"bgColor":"#F0F0F0"},{"id":"Container-1761030903846","elements":[{"id":"Text-1761030908558","text":"Exception Handling","x":4.66668701171875,"y":3.3333740234375,"width":192.984375,"height":33.984375,"bgColor":"#E0E0E0"},{"id":"Code-1761030922209","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># An exception is an error that occurs during program execution.</span>\n<span class=\"hljs-comment\"># try: Code that might raise an exception.</span>\n<span class=\"hljs-comment\"># except: Code that runs if an exception occurs.</span>\n<span class=\"hljs-comment\"># else: Runs if no exception occurs.</span>\n<span class=\"hljs-comment\"># finally: Always runs, used for cleanup.</span>\n\n<span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"No error here\"</span>)\n<span class=\"hljs-keyword\">except</span> ValueError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Invalid number!\"</span>)\n<span class=\"hljs-keyword\">except</span> TypeError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Wrong type!\"</span>)\nexcept:\n    print('Something strange has happened here... Sorry!')\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Success!\"</span>)\n<span class=\"hljs-keyword\">finally</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Always runs\"</span>)\n\n<span class=\"hljs-comment\"># We can raise exceptions manually</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_age</span>(<span class=\"hljs-params\">age</span>):\n    <span class=\"hljs-keyword\">if</span> age &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"Age can't be negative\"</span>)\n\n<span class=\"hljs-comment\"># We can define custom excedptions </span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyError</span>(<span class=\"hljs-title class_ inherited__\">Exception</span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">raise</span> MyError(<span class=\"hljs-string\">\"Something went wrong\"</span>)<br></code></pre>","x":17.66668701171875,"y":54.3333740234375,"width":800.953125,"height":405,"bgColor":"#555"}],"x":1206.6666870117188,"y":2547.3333740234375,"width":849.984375,"height":502.96875,"bgColor":"#F0F0F0"},{"id":"Divider-1761033375037","text":"Divider","x":180,"y":926,"width":2112,"height":22.96875,"bgColor":"#F0F0F0"},{"id":"Container-1761033388623","elements":[{"id":"Text-1761033394382","text":"Modules","x":7,"y":8.5,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1761033404300","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># A module is simply a Python file (.py) that contains definitions — functions, classes, variables </span>\n<span class=\"hljs-comment\"># that you can import and use in other Python programs.</span>\n\n<span class=\"hljs-comment\"># mymodule.py</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Hello, <span class=\"hljs-subst\">{name}</span>!\"</span>)\n\n<span class=\"hljs-keyword\">import</span> mymodule\nmymodule.greet(<span class=\"hljs-string\">\"Alice\"</span>)\n\n<span class=\"hljs-comment\"># we can import specific items in a module </span>\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt\n<span class=\"hljs-built_in\">print</span>(sqrt(<span class=\"hljs-number\">25</span>))\n\n<span class=\"hljs-comment\"># we can alias a module </span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-comment\"># import all in a module (not recommended)</span>\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> *\n</code></pre>","x":16,"y":59,"width":840,"height":349.96875,"bgColor":"#555"}],"x":214,"y":999.5,"width":883.96875,"height":424.96875,"bgColor":"#F0F0F0"},{"id":"Container-1761033957016","elements":[{"id":"Text-1761033963656","text":"Packages","x":8,"y":10.25,"width":117,"height":33.984375,"bgColor":"#E0E0E0"},{"id":"Code-1761033976765","text":"# A package is simply a directory that contains a special __init__.py file (even if it's empty). \n# This file tells Python that the directory should be treated as a package.\n\nmy_package/\n│\n├── __init__.py\n├── module1.py\n└── module2.py\n\nfrom my_package import module1\nmodule1.my_function()\n","x":15,"y":58.25,"width":750,"height":270.984375,"bgColor":"#555"}],"x":1168,"y":1004.25,"width":801,"height":370,"bgColor":"#F0F0F0"},{"id":"Container-1761034877734","elements":[{"id":"Text-1761034883474","text":"pip","x":9,"y":6.75,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1761034889916","text":"# pip is Python’s package installer — \n# your go-to tool for adding libraries and frameworks to your projects.\n\n# Install a package\npip install requests\n\n# Install a specific version\npip install numpy==1.24.0\n\n# Upgrade a package\npip install --upgrade pandas\n\n# Uninstall a package\npip uninstall flask\n\n# List installed packages\npip list\n\n# Save dependencies to a file\npip freeze &gt; requirements.txt\n\n# Install from a requirements file\npip install -r requirements.txt\n\npip install git+https://github.com/user/repo.git\npip install ./local_folder\n\n","x":18,"y":64.75,"width":672,"height":220.96875,"bgColor":"#555"}],"x":2002,"y":1018.75,"width":694.96875,"height":313.96875,"bgColor":"#F0F0F0"},{"id":"Container-1761138298984","elements":[{"id":"Text-1761138304371","text":"Strings","x":5,"y":2.5,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1761138452232","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># They represent sequences of characters and are used extensively for text processing</span>\n<span class=\"hljs-comment\"># Use single, double, or triple quotes</span>\n\ns1 = <span class=\"hljs-string\">'Hello'</span>\ns2 = <span class=\"hljs-string\">\"World\"</span>\ns3 = <span class=\"hljs-string\">'''Multiline\nstring'''</span>\n\n<span class=\"hljs-comment\"># Access characters by index</span>\ns = <span class=\"hljs-string\">\"Python\"</span>\n<span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">0</span>])    <span class=\"hljs-comment\"># 'P'</span>\n<span class=\"hljs-built_in\">print</span>(s[-<span class=\"hljs-number\">1</span>])   <span class=\"hljs-comment\"># 'n'</span>\n\n<span class=\"hljs-comment\"># Slice substrings</span>\n<span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">4</span>])  <span class=\"hljs-comment\"># 'yth'</span>\n<span class=\"hljs-built_in\">print</span>(s[:<span class=\"hljs-number\">3</span>])   <span class=\"hljs-comment\"># 'Pyt'</span>\n\nlower()\t        Converts to lowercase\nupper()\t        Converts to uppercase\nstrip()\t        Removes leading/trailing whitespace\nreplace(a, b)\tReplaces substring a <span class=\"hljs-keyword\">with</span> b\nsplit()\t        Splits string into a <span class=\"hljs-built_in\">list</span>\njoin(<span class=\"hljs-built_in\">list</span>)\t        Joins <span class=\"hljs-built_in\">list</span> into a string\nfind(sub)\tFinds first index of sub\nstartswith()\tChecks <span class=\"hljs-keyword\">if</span> string starts <span class=\"hljs-keyword\">with</span> a value\nendswith()\tChecks <span class=\"hljs-keyword\">if</span> string ends <span class=\"hljs-keyword\">with</span> a value\ncapitalize() – changes all string letters to capitals;\ncenter()     – centers the string inside the field of a known length;\ncount()      – counts the occurrences of a given character;\njoin()       – joins all items of a tuple/list into one string;\nlower()      – converts all the string's letters into lower-case letters;\nlstrip()     – removes the white characters from the beginning of the string;\nreplace()    – replaces a given substring with another;\nrfind()      – finds a substring starting from the end of the string;\nrstrip()     – removes the trailing white spaces from the end of the string;\nsplit()      – splits the string into a substring using a given delimiter;\nstrip()      – removes the leading and trailing white spaces;\nswapcase()   – swaps the letters' cases (lower to upper and vice versa)\ntitle()      – makes the first letter in each word upper-case;\nupper()      – converts all the string's letter into upper-case letters.\nendswith()   – does the string end with a given substring?\nisalnum()    – does the string consist only of letters and digits?\nisalpha()    – does the string consist only of letters?\nislower()    – does the string consists only of lower-case letters?\nisspace()    – does the string consists only of white spaces?\nisupper()    – does the string consists only of upper-case letters?\nstartswith() – does the string begin with a given substring?\n</code></pre>","x":21,"y":53.5,"width":895.96875,"height":1030.96875,"bgColor":"#555"}],"x":160,"y":3899.5,"width":903,"height":481.96875,"bgColor":"#F0F0F0"},{"id":"Divider-1761143992436","text":"Divider","x":139,"y":4429.5,"width":2196,"height":22.96875,"bgColor":"#F0F0F0"},{"id":"Text-1761144013751","text":"Object Oritend Programming","x":155,"y":4486.5,"width":294,"height":31.96875,"bgColor":"#E0E0E0"},{"id":"Container-1761144082852","elements":[{"id":"Text-1761144087718","text":"Class - Objects","x":8,"y":11,"width":195.984375,"height":36,"bgColor":"#E0E0E0"},{"id":"Code-1761144102354","text":"<pre><code class=\"language-python hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\"># A class is a blueprint for creating objects</span>\n<span class=\"hljs-comment\"># An object is an instance of a class</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    species = <span class=\"hljs-string\">\"Canine\"</span>  <span class=\"hljs-comment\"># class variable</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\n        <span class=\"hljs-variable language_\">self</span>.name = name\n\ndog1 = Dog(<span class=\"hljs-string\">\"Buddy\"</span>)\ndog2 = Dog(<span class=\"hljs-string\">\"Max\"</span>)\n\n<span class=\"hljs-built_in\">print</span>(dog1.species)  <span class=\"hljs-comment\"># Canine</span>\n<span class=\"hljs-built_in\">print</span>(dog2.species)  <span class=\"hljs-comment\"># Canine</span>\n<span class=\"hljs-built_in\">print</span>(dog1.name)      <span class=\"hljs-comment\"># Buddy</span>\n\n\n<span class=\"hljs-variable language_\">self</span>.attribute\t        Public (accessible <span class=\"hljs-keyword\">from</span> anywhere)\n<span class=\"hljs-variable language_\">self</span>._attribute\t        Protected (internal use, <span class=\"hljs-keyword\">not</span> enforced)\n<span class=\"hljs-variable language_\">self</span>.__attribute\tPrivate (name-mangled to prevent access)\n\n<span class=\"hljs-comment\"># Use __ prefix for attributes that should be private.</span>\n<span class=\"hljs-comment\"># Provide getter/setter methods to access or modify private data safely.</span>\n\n__init__\t             Object creation\tConstructor, initializes attributes\n__str__\t                     <span class=\"hljs-built_in\">str</span>(obj) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">print</span>(obj)\tHuman-readable string representation\n__repr__\t             <span class=\"hljs-built_in\">repr</span>(obj) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">in</span> console\tUnambiguous string <span class=\"hljs-keyword\">for</span> debugging\n__len__\t                     <span class=\"hljs-built_in\">len</span>(obj)\tLength of <span class=\"hljs-built_in\">object</span>\n__getitem__\t             obj[key]\tIndexing <span class=\"hljs-keyword\">or</span> key access\n__setitem__\t             obj[key] = value\tAssigning to index/key\n__delitem__\t             <span class=\"hljs-keyword\">del</span> obj[key]\tDeleting index/key\n__eq__\t                     obj1 == obj2\tEquality comparison\n__lt__\t                     obj1 &lt; obj2\tLess-than comparison\n__add__\t                     obj1 + obj2\tAddition\n__call__\t             obj()\tMakes <span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">callable</span> like a function\n__iter__\t             <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> obj\tIteration\n__next__\t             <span class=\"hljs-built_in\">next</span>(obj)\tNext item <span class=\"hljs-keyword\">in</span> iteration\n__contains__\t             x <span class=\"hljs-keyword\">in</span> obj\tMembership test\n\n</code></pre>","x":19,"y":67,"width":876,"height":691.96875,"bgColor":"#555"}],"x":169,"y":4569,"width":924.984375,"height":787.96875,"bgColor":"#F0F0F0"},{"id":"Container-1761145856944","elements":[{"id":"Text-1761145862173","text":"Generators","x":3,"y":3,"width":147,"height":37.984375,"bgColor":"#E0E0E0"},{"id":"Code-1761145874069","text":"# A generator is a function that uses the yield keyword instead of return. \n# It produces a sequence of values lazily\n\ndef count_up_to(max):\n    count = 1\n    while count &lt;= max:\n        yield count\n        count += 1\n\ncounter = count_up_to(5)\nfor num in counter:\n    print(num)\n\n\n","x":13,"y":53,"width":610.984375,"height":283.984375,"bgColor":"#555"}],"x":1168,"y":3890,"width":639.984375,"height":352.984375,"bgColor":"#F0F0F0"},{"id":"Container-1761146776407","elements":[{"id":"Text-1761146783814","text":"Lambda","x":8.5,"y":7.25,"width":99.984375,"height":30,"bgColor":"#E0E0E0"},{"id":"Code-1761146792325","text":"# lambda keyword lets you create anonymous functions\n# functions without a name — in a single line. \n# These are especially useful for short, throwaway functions used as arguments to higher-order \n# functions like map(), filter(), or sorted().\n\nlambda arguments: expression\nsquare = lambda x: x ** 2\nprint(square(5))  # 25\n\n\n","x":14.5,"y":50.25,"width":531.984375,"height":220.984375,"bgColor":"#555"}],"x":2125.5,"y":2542.25,"width":562.984375,"height":283.984375,"bgColor":"#F0F0F0"},{"id":"Path-1760698474735","text":"*","sElement":"Node-1760698350536","eElement":"Node-1760698361878"},{"id":"Path-1760698476287","text":"*","sElement":"Node-1760698361878","eElement":"Node-1760698369870"},{"id":"Path-1760698477739","text":"*","sElement":"Node-1760698369870","eElement":"Node-1760698442544"},{"id":"Path-1760698479219","text":"*","sElement":"Node-1760698442544","eElement":"Node-1760698426596"}]